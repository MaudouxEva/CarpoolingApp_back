// <auto-generated />
using System;
using CarpoolingApp.DB.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarpoolingApp.DB.Migrations
{
    [DbContext(typeof(CarpoolingAppContext))]
    [Migration("20250128100823_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarpoolingApp.DB.Entities.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatSessionId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Sender")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("PK_ChatMessage_PrimaryKey");

                    b.HasIndex("ChatSessionId");

                    b.HasIndex("Sender");

                    b.ToTable("ChatMessage", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.ChatSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicantId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DriverId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("RequestId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_ChatSession_PrimaryKey");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RequestId");

                    b.ToTable("ChatSession", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Institution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_Institution_PrimaryKey");

                    b.HasIndex("LocationId");

                    b.ToTable("Institution", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_Location_PrimaryKey");

                    b.ToTable("Location", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DesiredDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("EndingLocation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsRoundTrip")
                        .HasColumnType("boolean");

                    b.Property<int>("StartingLocation")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_Request_PrimaryKey");

                    b.HasIndex("EndingLocation");

                    b.HasIndex("StartingLocation");

                    b.HasIndex("UserId");

                    b.ToTable("Request", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.HasKey("Id")
                        .HasName("PK_Role_PrimaryKey");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<int>("InstitutionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PasswordHash");

                    b.HasKey("Id")
                        .HasName("PK_User_PrimaryKey");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("InstitutionId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.UserLocationPreference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LocationId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_UserLocationPreference_PrimaryKey");

                    b.HasIndex("LocationId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLocationPreference", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("PK_UserRole_PrimaryKey");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("User_Role", (string)null);
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.ChatMessage", b =>
                {
                    b.HasOne("CarpoolingApp.DB.Entities.ChatSession", "ChatSession")
                        .WithMany("ChatMessages")
                        .HasForeignKey("ChatSessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ChatMessage_ChatSession");

                    b.HasOne("CarpoolingApp.DB.Entities.User", "SenderUser")
                        .WithMany("ChatMessagesSent")
                        .HasForeignKey("Sender")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ChatMessage_SenderUser");

                    b.Navigation("ChatSession");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.ChatSession", b =>
                {
                    b.HasOne("CarpoolingApp.DB.Entities.User", "Applicant")
                        .WithMany("ChatSessionsAsApplicant")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ChatSession_Applicant");

                    b.HasOne("CarpoolingApp.DB.Entities.User", "Driver")
                        .WithMany("ChatSessionsAsDriver")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ChatSession_Driver");

                    b.HasOne("CarpoolingApp.DB.Entities.Request", "Request")
                        .WithMany("ChatSessions")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ChatSession_Request");

                    b.Navigation("Applicant");

                    b.Navigation("Driver");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Institution", b =>
                {
                    b.HasOne("CarpoolingApp.DB.Entities.Location", "Location")
                        .WithMany("Institutions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Institution_Location");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Request", b =>
                {
                    b.HasOne("CarpoolingApp.DB.Entities.Location", "EndingLocationNav")
                        .WithMany("RequestsAsEnding")
                        .HasForeignKey("EndingLocation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_EndingLocation");

                    b.HasOne("CarpoolingApp.DB.Entities.Location", "StartingLocationNav")
                        .WithMany("RequestsAsStarting")
                        .HasForeignKey("StartingLocation")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Request_StartingLocation");

                    b.HasOne("CarpoolingApp.DB.Entities.User", "User")
                        .WithMany("Requests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Requests_User");

                    b.Navigation("EndingLocationNav");

                    b.Navigation("StartingLocationNav");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.User", b =>
                {
                    b.HasOne("CarpoolingApp.DB.Entities.Institution", "Institution")
                        .WithMany("Users")
                        .HasForeignKey("InstitutionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_User_Institution");

                    b.Navigation("Institution");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.UserLocationPreference", b =>
                {
                    b.HasOne("CarpoolingApp.DB.Entities.Location", "Location")
                        .WithMany("UserLocationPreferences")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserLocationPreferences_Location");

                    b.HasOne("CarpoolingApp.DB.Entities.User", "User")
                        .WithMany("UserLocationPreferences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserLocationPreferences_User");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.UserRole", b =>
                {
                    b.HasOne("CarpoolingApp.DB.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Role");

                    b.HasOne("CarpoolingApp.DB.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.ChatSession", b =>
                {
                    b.Navigation("ChatMessages");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Institution", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Location", b =>
                {
                    b.Navigation("Institutions");

                    b.Navigation("RequestsAsEnding");

                    b.Navigation("RequestsAsStarting");

                    b.Navigation("UserLocationPreferences");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Request", b =>
                {
                    b.Navigation("ChatSessions");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("CarpoolingApp.DB.Entities.User", b =>
                {
                    b.Navigation("ChatMessagesSent");

                    b.Navigation("ChatSessionsAsApplicant");

                    b.Navigation("ChatSessionsAsDriver");

                    b.Navigation("Requests");

                    b.Navigation("UserLocationPreferences");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
